This Node Express server will serve as a RESTful API for the Local History Archives.
Will accept incoming requests from the client application and serve data as needed.
Full CRUD features will only be available to admins.

7/24
Create A model for the news papers and upload your first news paper.
- Things to consider:
    How to I specicfy that I want Newspaper documents in the GrossePointeNews collection to go in the Newspaper collection under the Local History Archives collection?
    See tree in MongoDB

    Is it possible to put a pdf in a request or will it need to be hosted somewhere else?


^Resolution: Since the PDF files are already hosted on the webserver, you only need to add the url to the pdf as part of the document data.
    Secondly, the collection is specified as the third argument in the model creation.


7/24
GP news route has the needed functionalities for incoming requests: POST(create), GET (read), PUT(update), DELETE(delete) [CRUD]
Need to build these functionalities for the other outlets.

Do I specify where documents go in the model? Or do I have to instantiate multiple DB connections? Probably the former. Research needed.


7/30
Add publish year as a field value for some collections. Need to be able to fetch data by a field besides ID.
    -Create endpoints for getting data by year.
        - For GP mag (and gp civic, gp heritage), add month and year fields.
        - For GP news (and gp review), add month, year and day fields

Begin work on the front end App.


7/31
Updated models and routes to accomodate the above schema changes.
Tested a newspaper model with the changes and results were successful.

Next:
Test the other routes to verify that requests come in with the new schema changes.
Create react app and begin crafing the now archives site. Refer to diagram and notes for design.


8/2

Find out why home component is not rendring (resolved [needed outlet in parent route (Navigation)])

Attempt to make a call to the API end point to retrive grosse pointe news data. (success)
    -   Remember to modify CORS policy before deployment


Create Table component for loading mapped values
When we go to gpnews in React, we put the user in 2024 by default.
When a user goes to a year page within gpnews, a get request is sent to the gpnews backend end-point.
This request contains a single argument that is the year.
mongoose will filter and return gpnews publications from the requested year.



Create a context for grosse pointe news (and eventually, each publication to fetch and store the issues). Avoid having to drill down props

For now, you can fetch the data from the backend in the context.
Ideally you should create functionality for talking to the backend in the utils folder and make async calls to server functions in the context's useEffect.

8/4
In gp_news routes, added a new route to handle a query 
where publications from a certain year are requested

-A context called publisher will be added.
    This context will help the offcanvas navigation component determine what to show as far as years and ranges
    A state value in publisher context called currentPublisher will default to empty string.
    currentPublisher will be updated when the route of a publisher is mounted.
        (e.g.) I navigate to grosse pointe news. The gpnews route component runs and accesses currentPublisher. Ultimately switching the context to gpnews.
        This will tell observer components like offcanvas navigation to read the fetched data and render the year ranges.


8/7
Remark
Had some trouble accessing the publisher context once it was created. I forgot to wrap the provider around the App in the Index.js files
The components wrapped inside a provider will have access to the contexts they provide.
So by wrapping it around App, all child components get access too.
----
Task
Need to have the side navigation show a list of year ranges.
This can either be hard coded or determinant.
------
Task
So when you go to gpnews home, you get a landing page for gpnews
the publisher state is set to gpnews
the newspaper context is set to an empty string.
when the user accesses the nav and clicks a year

The newspaper context's 'year' state changes to the requested year (e.g. currentYear = 2001)
When a useEffect in gpnews detects a change in the 'year' state value, it will fetch the relevant publications
from the backend by creating a concatenated query.

When the state of 'year' in newspaper context is not and empty string
the table will be rendered.
-----

8/8
Do writeup of how side nav works.

Consideration:
    - side nav currently renders the latest year and decade based on what the current year is
        what if the outlet bacomes discontinued?
        Instead of conditionally rendering by current date, render based on available data instead.
        Render based on the year of the latest issue from the outlet
------
Update:
- SideNavigation component uses a switch case to determine which parent component to render within the nav.

- Grosse Pointe news side bar is more or less finished.
    Each link updates the currentYear state in the newspaper context.
------
Tasks:
- Need to test clicking on year links in sideNavigation for grosse pointe news. (done)
    Clicking on a link should update the newspaper context (currentYear)
    causing the useEffect in the gpnews route (listening to current year)
    to send an updated GET request with the current year in its query.
        This should return and render the data in the table.

- Will need to add more publications to DB
- Will need to enclose fetch in a try-catch block to avoid crashes (do this for all outgoing requests). (done)
- Will need to set fetched data into state array instead of test data (done)

- In the nav bar add a child component that conditionally renders similar to navigation.
    When in gpnews, it should not only show "Grosse Pointe News", but the 'currentYear' as well.

- In the GPnews route, it should render GPnews home if currentYear is 0 (done)
    If not, it should fetch with the current year and render the table component.

- When a user clicks the Grosse Pointe News link in the top nav or side nav, have that button clear the publisher or set year to 0 (either one will set the year to 0)

8/9

Update:
Still working on the tasks from the previous log.
Curent issue: clicking on a year link will update the current year and the table will render *sometimes*
    Need to find out why sometimes the data is retried and some times it is not.
    The issue is not the filter method. React is complaining that newspaper is undefined/empty.
    So why isn't react successfully getting the data it requests...? Async? Promises? Axios?

8/14
    After some testing, I found out why the data does get set into setNewspaper. (nothing to do with fetching)
    accessing newspaper in useEffect immediately after calling setNewspaper leaves us with an empty array.
    It did, however, show a populate newspaper object in console log when accessed outside of useEffect.
    This leads me to believe nothing was set until useEffect completes its code block.

    My workaround is to render a filtered and mapped newspaper dierectly into the component html with injected jsx.
    This significantly reduced the amount of useStates and got rid of a length function (almost 100 lines less!).
    This seems more optimal and readable.

- Add a child to the nav that conditionally renders "Grosse Pointe News | <year>"

- Add more publications across more years for additional testing

- Work on styling of table component

- Add button components beneath the table for updating (incrementing/decrementing) the year


8/15

BE AWARE pre 1940 issues on the old gpnews site currently being hosted are actually grosse pointe review.

Note: remember there are arrorws in mongoDB for seeing the next page of a collection.

------------------
Ongoing Tasks:

Updated the gpnews route to accept an array of objects (do for other routes).
Table now conditionally renders each month row depending on if there is data to show or not.

- Add a child to the nav that conditionally renders "Grosse Pointe News | <year>"
    Make this its own component (Nav title) before doing so (Done)

- Add more publications across more years for additional testing (ongoing)

- Work on styling of table component (done with primary goals)

- Add button components beneath the table for updating (incrementing/decrementing) the year (done)

- Update other routes in Express to accept & validate 1 or more objects at a time. (onging)

(Planning to do after wrapping up GPnews)
To make table more modular as a parent component, try condtional fetching by first determining the currentPublisher
    - from there you can check the contexts relevant to that publisher for rendering rows in child components


Navigation does not have access to the newspaper context.
Possibilities? -> solved -> was using useState instead of useContext

8/23
Navigation Title feature added & resolved
Navigation button feature added

Future Tasks:
- Refactor components to follow planned component structure.
- look for potential parts of existing components that can be further broken down.
- Improve look of nav bar. (Done. Moved items to side bar) 
- Begin work on grosse pointe magazine. (Done)
    - Create a context for magazine.
    - Make gpmagazine route.
    - Set up gpmagazine side nav.
    - Begin work on table for gpmagazine.

Ongoing tasks:
- Update other routes in Express to accept & validate 1 or more objects at a time.
- Add more publications across more years for additional testing (ongoing)


8/28
Put news and magazine outlet dropdowns in the side bar at the top.


8/30
Added the route, table and sidenav components for grosse pointe magazine.
Modified Express route and model for gp magazine to accept an array of json objects for validation and upload.
gp magagine model now has a publishDecade field. gp magazine table requests files from a cerain decade using the query functionality in its get req.


Remaining routes:
civic, heritage, review

Ongoing tasks:
- Update other routes in Express to accept & validate 1 or more objects at a time. 
- Add more publications across more years for additional testing (gpnews).



9/5/24
!!!Idea for rending date ranges in side bar!!!
Find the lowest value for year/decade and the highest in the current route.
Let those be your upper and lower bounds. No real time needed. No issue were apended years/decades dont show up.
This initial fetch and process would occur when you go to the home page for a particular route.

Ex: arrive at gpnews. Fetch at an endpoint that returns an two ojects. 1 with the lowest and 1 with the highest year value.


9/11/24
Solution implemented in gp civic.
Next task is integrating it into gpmagazine.

Civic and magazine are using similar implementations to render decades in the side nav.
They are both sharing what was formerly the magazine context for accessing its decade member.

magazineContext is now decadeContext

Civic's table is now implemented. Much faster now that essential components are built.

Next Steps...
Next up is heritage. Heritage does not span multiple tables.
It consists of issues from 1984 to 1990.
With flexibility and consistency in mind, I will implement it similarly to the outlets using the decades context.


Lastly would be the Grosse Pointe Review.
This outlet is structured similarly to Grosse Pointe News.
Before Working on this. I would like to revise the sideNave decade rendering. 

Update:

gp heritage is added.

Next Steps...
Add gp review (see above notes). Update its backend route.
Beware: This outlet starts with a decade that has only 3 years. How to account for that and not overshoot?

- continue adding publications
- clean up code
    - unused imports
    - check for generalization opportunities
- rename files as needed
- add loading screens for slower devices/conntections to hide content calculation/placement.
- consider user facing error messages.
    - If no response from server -> "server unreachable". (done)
    - send custom server messages and check for them to front end app for appropriate action.
- CORS policy changes
- Err messages when doing fetches expose IP addesses. Maybe don't console log sensitive descriptions. Just give something basic. 

10/18
Isolate post logic in existing routes.
put in a route called upload and apply cors to it such that only a specific domain can upload to it.
Consider having a login authenticated by firebase that returns a key to the util and allows uploading.

(Two different virtual hosts with paths to both apps)
(users access LHA app via https://www.domain.com) 
(admins enter upload app via http://10.1.5.203)


----------------------------------------------
**Obituaries Architechture:**

Scaffolding: Collection and Document Architechture
- Obituaries will be 1 collection
- an obituary document will contain the following data (will use mongo generated _id): 

obituary = 
{
    last_name: string,
    first_name: string,
    middle_name: string,
    death_year: number,
    death_month: number,
    death_day: number,
    print_year: number,
    print_month: number,
    print_day: number,
    publication: string,
    page: number
}

Scaffolding: RESTful API Endpoints:
(Admin Route)
- There will be an express end point to: upload an obituary document to the collection
- There will be an express end point to: delete a document where the _id field matches the request _id
(Standard Route)
- There will be an express end point to: retrieve all obituary documents from the collection
- There will be an express end point to: retrieve the documents where the death_year field matches the requested death_year
- There will be an express end point to: retrieve the documents where the first_name field matches the requested first_name
- There will be an express end point to: retrieve the documents where the last_name field matches the requested last_name

For fetching obits, consider multi-query fetches ex: last name & death year
Consider adding 404 responses in endpoints when return payload length is 0

Tasks:
Express and REST API endpoints
- Create collection in mongoDB, create backend route.
- One end point at a time, create and test functionality (use postman).


Admin frontend logic
- Integrate TailwindCSS to backend to save styling aches. [Done]
- Implement Administrative interface for obituary. [Done]
    - Add a new component for Obituary upload.
    - No need to reference a file since these are just entries in the DB.


LHA user-facing app
- Tailwind overhaul?
- Consider drilldown scenarios you want to apply.
- Add a new route for Obituaries.
- Create a search bar component for handling queries.
- Create a table component for rendering the table contents if there is data to render.



Migration notes:
Before deployment, review the changes made here: https://www.freecodecamp.org/news/how-to-migrate-from-create-react-app-to-vite/
The env variables changed.
Overall vite migration was pretty straight forward since there arent many plugins.


3/27
Make the obituary form scrollable vertical if it goes beyond the screen height. DB view will be the same.



3/28
Vite and tailwind migration, and refactoring complete. Will return once Express server is updated with above specifications.
Finish fixing input styling then start on backend.

4/1
instead of using a custom hook, how about making autil directory to handle different
kinds of fetches

Ex: getCollection takes a collection name, retrieves the documents
Ex: getDocumentById takes a collection and ID then returns a document.
Ex: remove document takes a collection and an ID then submits an api request to remove the document.


Change all ADMIN_EXPRESS TO ADMIN_UPLOAD make it less confusing.
ADMIN_BACKEND will become BACKEND_ROOT

Address the above in the deployment and apache server


4/4
Finish testing table component
- prevent brevity change overshoot [Testing]

Finish rendering table headers for each 'route' [Done]

Observe issue getting obituary data from collection [Done]
 - Observe change in obituary get / endpoint
    [Update] - Do not sort if there is only 1 obj, only an issue if collection not populated but consider adding fix


Add copy functionality to each table record [Done]
    - User clicks Copy ID
    - copies ID to clipboard 
    

Modify create functionality in backend to update if ID already exists. [done]
    - Tested for GPNews. Create if no matching ID otherwise update.

4/10/25
Tasks: Apply new create implementation to... [Done]
- frontend upload components (news [D], heritage[D], civic, mag, rev, obit)
    - add _id field to object
    - isupdating state
    - record id state
    - fetch input and button
    - on state change: disable input, show clear button, change publish to update
    - updated data prep and api call

- update backend 'create' endpoints (news [D], heritage[D], civic[D], mag[D], rev[D], obit[D])
    - check for _id
    - do model.findByIdAndUpdate(element._id, obj, { new: true, runValidators: true })
        - updates record if matching id exists, otherwise create record.


Test create functionality in each form






Toast:
Make a popup utility function that displays an absolute component at the bottom of the screen
- accepts a message and a message type (success, error, warning)
- will render a component using tansitions and timers to similate a toast.

    - create an component for it on main route and set it to hidden.
    - it will utilize a context to change its state.
        - context updates to true and message and type are both updated,
        - message will show for 5 sec (determined in component)
        - the component will set the toast to false.

Toast calls
    - record submitted!
    - Record updated!
    - Edit Operation Cancelled
    - submission error, <Errmsg from backend>!
    - Fetch Failed! No such record matches ID:###
    - Record Deleted!
    - ID copied!


Refresh button for table



4/11/25
Remaining Feature Tasks:
- Toast [Done]
- Delete functionality for table [Done]
- Refresh button for table [Done]

- Make a help button in top right corner
- table search bar -> filter by field value (ex: ID, person name)

Testing/Debugging:
- Test upload [tested on each route]
- Test delete by ID [tested on each route]
- Test Edits/updates [tested]
    - added lines to update state of isupdating and recordID
- Fetching with empty fetch input. [pop up toast "enter something in fetch field" Does nothing else]
- Check for resource URL begins with "http" or ends in ".pdf"
    - reject the publish/update, raise a toast prompting the user to make necessary changes.
- Test Brevity overshoot bug [tested] 


Note to self. do not put state data in a function lest react will assume its a hook.

Next immediate task:
Finish updating submit and fetch logic in all forms. [Done]
Change Title of LHA upload to LHA Database Manager [Done]
Add toast functionality to all forms. Obituary Done. [Done]

Bug: when making a new record on obituary, backend complains about setting headers after they are sent
    if memory serves, this occures when an attempt to add a record with unprecidented properties to a collection occurs
    - fixed: Sever was sending a response after 1 was sent
    - soulution. Removed server responses from edgecases and instead are throwing custom errors
        - response will be hndled by catch logic to echo error and send status.
Bug: did not clear id field after update op.
    - fixed: state was not being updated after update operation.


4/17/25
Tasks:
- Help panel (right half of screen next to form will have instructions). [Done]


4/23/25
- Search for table for record
    - papers
        - By ID
        - By publish date
    - obits
        - by last name
        - by first name
        - by middle name
        - by publisher
        - by death date
        - by print date


create a boolean render on the table component.
If user clicks filter, set isFiltering to true.
if isFiltering is true, render child component.
    Prop drill with filtered data



Testing:
leaving an input field year as 0 in obituaries made the backend crash.
update min value and min length
update default form control object
show empty table when no data

Update 4/30/2025
Added legacy data to database and exported to a json (roughly 4.4k records).
    - Used a backend route that is commented out to handle the unsanitized payloads and create records.
Will add search later

Design Consideration:
Build backend server for managing the database?


Next Task: get this to behave on the production server
    - Put up maintainance message (point apache to an htlm file with notice).
    - Turn off auto deployment
    - Add obituaries to history-archives app
    - Migrate from CRA to Vite, and move from bootstrap to tailwind
    - Test Merge
    - Record all changes to environment variables, IP addresses
    - Locate and make note of deployment paths
    - Update deployment script (Make comments, notes for each task)
    - Test with new integration




5/9/2025
Obituary Database for LHA app

- Default sort is most recent to least recent publication to most recent.
- Sort options
    - By death date (ascend, descend)
    - By print date (ascend, descend)
    - By First name, middle name, and last name (1, 2 or all three options must be present)
        - routine will handle how to search depending on which fields are non empty
    
    - Compound searches (e.g. name + year)?


Create a debouncing step when typing into search fields
For the change handler. Utilize useEffect with a timeout.
Process the input after a set amount of seconds after handler is called.


Table and Search:
- Any year or manual option [Done]
- If publisher name or page number is empty, show unknown [Done]
- If death year is 209999 show unknown [Done]
- If print year is 209999 show unknown [Done]
- Show no flicker when changing table page
- Adjust table increment and brevity logic to acomodate filtering
- if any year is true but all other fields empty, return all records (the argued array).
- run filter routine when all years selection changes.
- refresh button should trigger field defaults

- add a button for exact string
    Ex: input ran (shows ran not Fran)
    Make a derivative function that does this

    -Consider wrapper functionality in table search helper:
        make a function that accepts the requirements + options
        determine which function to call based on options